name: CI

on:
  push:
  pull_request:

jobs:
  install_with_pip3:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install with pip3
        run: |
          pip3 install .
          pip3 show {{cookiecutter.project_slug}}
  unittests:
{% raw %}
    runs-on: ${{ matrix.os }}
{% endraw %}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8", "3.9"]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
{% raw %}
          python-version: ${{ matrix.python-version }}
{% endraw %}
      - name: Python Poetry Action
        uses: abatilo/actions-poetry@v2.1.3
      - name: Install prerequisites
        run: poetry install
      - name: Run tests
        run: poetry run pytest --doctest-modules
  check_style:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Python Poetry Action
        uses: abatilo/actions-poetry@v2.1.3
      - name: Install prerequisites
        run: poetry install
      - name: Check style
        run: poetry run ./misc/check_style.py --check-only
  lint_code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Python Poetry Action
        uses: abatilo/actions-poetry@v2.1.3
      - name: Install prerequisites
        run: poetry install
      - name: Lint code
        run: poetry run ./misc/lint_code.py --check-only
  coverage:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-python@v2
          with:
            python-version: "3.8"
        - name: Python Poetry Action
          uses: abatilo/actions-poetry@v2.1.3
        - name: Install prerequisites
          run: poetry install
        - name: Coverage
          run: |
            poetry run coverage run -m pytest --doctest-modules
            poetry run coverage report
        - name: Coveralls
          run: poetry run coveralls
          env:
{% raw %}
            COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
{% endraw %}
  publish_package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Publish package to pypi
        uses: JRubics/poetry-publish@v1.9
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        with:
{% raw %}
          pypi_token: ${{ secrets.PYPI_API_TOKEN }}
{% endraw %}
